@startuml EngineArchitecture

namespace Engine {

  class FileManager <<Singleton>> {
    
  }

  class Game <<Singleton>> {
    + Scene* m_currentScene
    + std::map<string, Scene*> m_loadedScenes

    - {static} Renderer m_Instance
    + {static} {method} getInstance()

    
    + {method} AddScene()
    + {method} RemoveScene()
    + {method} SwitchScene()

    + {method} CallDraw()
    + {method} CallUpdate()
  }
  
  abstract Node {
    - std::vector<Node*> m_children
    - bool m_enabled
    # Node* m_parent
    + const char* m_nodeType;
    + string m_name;

    + {method} void Enable()
    + {method} void Disable()

    + {method} unsigned int AddChild(Node*)
    + {method} Node& GetChild(unsigned int)
    + {method} void RemoveChild(unsigned int)

    + {method} void OnEnable()
    + {method} void OnDisable()
    + {method} void Init();
    + {method} void Draw();
    + {method} void Update(dt);
  }

  class GameObject extends Node {
    # Vec3 Position, Scale, Rotation
    + {method} GetGlobalPosition()
    + {method} GetGlobalRotation()
  }

  class Scene extends Node

  namespace Input {
    class InputManager {
      - map<string, Axis> m_axes

      + {method} InputManager()
      + {method} void Update()
      + {method} void AddAxis(string, InputParams, InputParams)
      + {method} float GetAxis(string)
      + {method} void AddInput(string, InputParams)
      + {method} Input* GetInput
    }

    class Input {
      - char m_keyCode
      - char m_mouseButton
      - char m_gamepadeInput
      - float m_isDown
      - bool m_isPressed
      - bool m_isReleased
      + float currentStrength

      + {method} Input(InputParams)
      + {method} ~Input()
      + {method} void Update()
      + {method} bool IsPressed()
      + {method} bool IsReleased()
      + {method} bool IsDown()
      + {method} float Strength()
      + {method} char GetInput(InputDevice)
    }

    class Mouse <<Singleton>> {
      - Vec2f m_position
      - vector<Input*> m_listeners
      - {static} Mouse m_instance;
      - {method} Mouse()
      + {method} {static} GetInstance()
      + {method} void AddListener(Input)
      + {method} void RemoveListener(Input)
      + {method} Vec2f GetPosition()
    }

    class Keyboard <<Singleton>> {
      - vector<Input*> m_listeners
      - {method} Keyboard()
      - {static} Keyboard m_instance
      + {method} {static} Keyboard& GetInstance()
      + {method} void AddListener(Input)
      + {method} void RemoveListener(Input)
    }

    Input --* Mouse
    Input --* Keyboard
    InputManager *- Input
  }

  Scene -* Game
  Graphics.Renderer --* Game

  namespace UI {
    class UIElement {
      # const char* m_uiTag;
      # const char* m_uiClass;

      + {method} void AddTheme(themeName);
      + {method} void SetAnchor(anchor);
      + {method} void SetDimensions(Vec2f dimensions);
      + {method} void SetOffset(Vec2f offset);
    }

    class UILabel extends UIElement {
      # std::string m_text;

      + {method} SetText(text);
    }

    class UIButton extends UILabel {
      - {method} m_mouseClickEnscripten();
      + void& OnClick()
    }

    class UIInput extends UIElement {
      - const char* m_placeholder;
      - std::string m_value;

      + {method} int getInputInt();
      + {method} double getInputDouble();
      + {method} std::string getInputString();
    }
  }

  UI.UIElement -|> Node

  namespace Graphics {
    abstract Mesh {
      - vector<Vertex> m_vertices
      - vector<unsigned short> m_indices

      # {method} Success AddTriangle(v1, v2, v3)
      # {method} Success AddQuad(v1, v2, v3, v4)
      + {method} float* GetVertices()
      + {method} unsigned long GetVertexCount()
      + {method} unsigned short* GetIndices()
      + {method} unsigned long GetIndexCount()
    }

    class Texture {
      - int m_texture
      - int[] m_dimensions
      - const char* m_filename
      - {method} void LoadTexture()
      + {method} Texture(filename)
      + {method} unsigned GetTexture()
    }

    class Shader {
      - unsigned m_shaderProgram
      - const char* m_frag, m_vert;
      - {method} void CompileShader()
      + {method} Shader(frag, vert)
      + {method} unsigned GetShaderProgram()
    }

    class Material {
      - Shader* m_referenceShader
      - map<const char*, MaterialParamType> m_parameters
      - map<const char*, void*> m_parameterValues
      
      + {method} Material(m_referenceShader)
      + {method} void CreateParameter(name, type)
      + {method} void* SetParameter(name, value)
      + {method} void ApplyMaterialParams()
      + {method} Shader* GetShader()
    }

    class Renderer {
      - unsigned long m_context
      - const char* m_id
      - unsigned int m_vbo, m_vao, m_ebo
      - unsigned m_currentShaderProgram
      - GameObject* m_camera

      + {method} Renderer(elementId)
      + {method} void ClearBuffer()
      + {method} void DrawMesh(mesh, position, scale, rotation)
      + {method} void UseShader(shader)
      + {method} void UseTexture(texture, slot)
      + {method} void UseMaterial(material)
      + {method} void SetCameraReference(camera)
      + {method} void SetBackgroundColor(color)
    }

    Texture --* Renderer
    Shader --* Material
    Shader -* Renderer

    Material .> Renderer 
    Mesh .> Renderer
  }

  GameObject --* Renderer

  namespace Audio {
    enum SoundState {
      READY
      QUEUED
      PLAYING
    }

    abstract Audio {
      + void Play()
    }

    class Sound extends Audio {
      + void Play(Vec3f position);
    }

    class Music extends Audio {
      + SoundState playing()
      + void Pause()
      + void setLoop()
    }

    SoundState -* Music
  }
}

namespace Browser {
  Object Canvas
  Object User_Interface
  Object DOM
  Object Web_Audio_API

  class game.Audio {
    - string filename
    - HTMLElement element
    - WebAPINode source
    - string type
    - bool loop
    - float[2] buffers

    + {method} void makeSong()
    + {method} void makeSound()
    + {method} void setBuffers(float gain, float panning)
    + {method} void play()
    + {method} void pause()
    + {method} void isPlaying()
    + {method} void setLoop(bool)
  }

  DOM *.. User_Interface
  DOM *.. Canvas
  DOM *. Web_Audio_API

  game.Audio -> Web_Audio_API
}

Engine.Graphics.Renderer .> Browser.Canvas
Engine.Game ..* Browser.DOM : "CallDraw and CallUpdate are running through a loop created \nwith javascript on window.addEventListener('load')"
Engine.UI.UIElement ..> Browser.User_Interface
Engine.Audio.Audio ..* Browser.game.Audio
Engine.Input.Keyboard ..* Browser.DOM
Engine.Input.Mouse ..* Browser.DOM

@enduml