@startuml EngineArchitecture

namespace Engine {
  class Renderer {
    + {method} Renderer(elementId)
    
    + {method} DrawMesh()
    + {method} DrawMesh2D()
  }

  class FileManager <<Singleton>> {
    
  }

  class Game <<Singleton>> {
    + Scene* m_currentScene
    + std::map<string, Scene*> m_loadedScenes

    - {static} Renderer m_Instance
    + {static} {method} getInstance()

    
    + {method} AddScene()
    + {method} RemoveScene()
    + {method} SwitchScene()

    + {method} CallDraw()
    + {method} CallUpdate()
  }
  
  abstract Node {
    - std::vector<Node*> m_children
    - bool m_enabled
    # Node* m_parent
    + const char* m_nodeType;
    + string m_name;

    + {method} void Enable()
    + {method} void Disable()

    + {method} unsigned int AddChild(Node*)
    + {method} Node& GetChild(unsigned int)
    + {method} void RemoveChild(unsigned int)

    + {method} void OnEnable()
    + {method} void OnDisable()
    + {method} void Init();
    + {method} void Draw();
    + {method} void Update(dt);
  }

  class Scene extends Node

  class InputManager {

  }

  Scene -* Game
  Renderer --* Game

  namespace UI {
    class UIElement {
      # const char* m_uiTag;
      # const char* m_uiClass;

      + {method} void AddTheme(themeName);
      + {method} void SetAnchor(anchor);
      + {method} void SetDimensions(vec2 dimensions);
      + {method} void SetOffset(vec2 offset);
    }

    class UILabel extends UIElement {
      # std::string m_text;

      + {method} SetText(text);
    }

    class UIButton extends UILabel {
      - {method} m_mouseClickEnscripten();
      + void& OnClick()
    }

    class UIInput extends UIElement {
      - const char* m_placeholder;
      - std::string m_value;

      + {method} int getInputInt();
      + {method} double getInputDouble();
      + {method} std::string getInputString();
    }
  }

  UI.UIElement -|> Node

  namespace Graphics {
    abstract Mesh {
      + {method} Vec3 getVertex()
      + {method} Vec2 getVertex2D()
    }

    class Texture {
      - int TextureID
      + {method} Texture(string filename)
      + {method} const int getTextureID()
    }

    class Shader {

    }

    class Material {

    }

    Texture --* Material    
    Shader -* Material
  }

  Graphics.Material .> Renderer 
  Graphics.Mesh .> Renderer 
}

namespace Browser {
  Object Canvas {

  }

  Object User_Interface {

  }

  Object DOM {

  }

  DOM *.. User_Interface
  DOM *.. Canvas
}

Engine.Renderer .> Browser.Canvas
Engine.Game ..* Browser.DOM : "CallDraw and CallUpdate are running through a loop created \nwith javascript on window.addEventListener('load')"
Engine.UI.UIElement ..> Browser.User_Interface

@enduml